<?php

/**
 * Implements hook_ctools_plugin_directory
 */
function oa_notifications_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_theme().
 */
function oa_notifications_theme() {
  return array(
    'oa_notifications_view' => array(
      'template' => 'oa-notifications-view',
      'variables' => array(
        'organization' => array(),
        'team' => array(),
        'user' => array(),
      ),
      'path' => drupal_get_path('module', 'oa_notifications') . '/templates',
    ),
  );
}


/**
 * Some utility functions...
 */

/**
 * Get all Organizations
 */
function oa_notifications_get_orgs() {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'))
      ->condition('n.type', OA_ORG_TYPE)
      ->addTag('node_access');
  return $query->execute()->fetchAllAssoc('nid');
}

/**
 * Get the listing of teams that are in the specified group, or the current
 * group is no group is specified.
 *
 * @param int $gid
 *    The Group ID
 */
function oa_notifications_get_teams_for_group($gid = NULL) {
  if (!isset($gid)) {
    $gid = $_SESSION[OG_SESSION_CONTEXT_ID];
  }
  $query = db_select('node', 'n');
  $query->rightJoin('og_membership', 'og', 'n.nid = og.etid');
  $query->fields('n', array('nid', 'title'))
      ->condition('n.type', OA_TEAM_TYPE)
      ->condition('og.entity_type', 'node')
      ->condition('og.field_name', OA_GROUP_FIELD)
      ->condition('og.gid', $gid)
      ->addTag('node_access');
  return $query->execute()->fetchAllAssoc('nid');
}

/**
 * Get the listing of user with that are in the specified group, or the current
 * group if no group is specified that also have access to the provided node.
 *
 * @TODO: Consider the case where user.name is the not name to be used.
 *
 * @param int $gid
 *    The Group ID
 */
function oa_notifications_get_users_for_node($node, $gid = NULL) {
  if (!isset($gid)) {
    $gid = $_SESSION[OG_SESSION_CONTEXT_ID];
  }
  $query = db_select('users', 'u');
  $query->rightJoin('og_membership', 'og', 'u.uid = og.etid');
  $query->fields('u', array('uid', 'name'))
      ->condition('og.entity_type', 'user')
      ->condition('og.gid', $gid);

  $results = $query->execute()->fetchAllAssoc('uid');

  // @TODO: This won't scale. We need users that have access to the given node
  // which is controlled by node_access grants, etc.  Not easily queried.
  // The move to an autocomplete might make this potential performance problem disappear.
  $users = user_load_multiple(array_keys($results));
  if (isset($node->nid)) {
    foreach ($users as $uid => $user) {
      if (!node_access('view', $node, $user)) {
        unset($users[$uid]);
      }
    }
  }
  return $users;
}

/**
 * Return all notifications for given source.  Optionally filtered by type.
 *
 * @param int $source_id
 *    The ID of the source (typically a nid)
 * @param string $source_type
 *    The entity type of the source (defaults to 'node')
 * @params string $target_type
 *    An optional parameter that allows to filter the notification based on target type (organization, team, user)
 * @return
 *    Returns an associative array of notifications first keyed by target type,
 *    then beneath that keyed by the target_id
 */
function oa_notifications_load_multiple($source_id, $source_type = 'node', $target_type = NULL) {
  $query = db_select('oa_notifications', 'n')
    ->fields('n')
    ->condition('n.source_id', $source_id)
    ->condition('n.$source_type', $source_type);

  if (isset($target_type)) {
    $query->condition('n.target_type', $target_type);
  }

  $notifications = array();
  $results = $query->execute()->fetchAllAssoc('notification_id');

  foreach ($results as $id => $row) {
    $notifications[$row->target_type][$row->target_id] = $row;
  }

  return $notifications;
}

/**
 * @param $values
 */
function oa_notifications_save_notifications($values) {
  $source_id = $values['source_id'];
  $source_type = $values['source_type'];

  $notifications = array();
  foreach (array('organization', 'team', 'user') as $type) {
    foreach ($values[$type] as $id) {
      $n = new stdClass;
      $n->source_id = $source_id;
      $n->source_type = $source_type;
      $n->target_id = $id;
      $n->target_type = $type;
      $notifications[] = $n;
    }
  }

  oa_notifications_save_for_source($source_id, $source_type, $notifications);
}

/**
 * Save a collection of Notifications for a particular source item.
 *
 * @param int $source_id
 *    The ID of the source (typically a nid)
 * @param string $source_type
 *    The entity type of the source (defaults to 'node')
 * @param array $notifications
 *    A collection of Notification object for this source
 */
function oa_notifications_save_for_source($source_id, $source_type, $notifications) {
  db_delete('oa_notifications')
    ->condition('source_id', $source_id)
    ->condition('source_type', $source_type)
    ->execute();

  foreach ($notifications as $n) {
    drupal_write_record('oa_notifications', $n);
  }
}


/**
 * Implements hook_node_insert().
 */
function oa_notifications_node_insert($node) {
  if (oa_notifications_is_notification_type($node)) {
    $node->oa_notifications['source_id'] = $node->nid;
    oa_notifications_save_notifications($node->oa_notifications);
  }
}

/**
 * Implements hook_node_update().
 */
function oa_notifications_node_update($node) {
  if (oa_notifications_is_notification_type($node)) {
    oa_notifications_save_notifications($node->oa_notifications);
  }
}

/**
 * Determine if this is an entity type on which we need to provide notifications
 *
 * @param $node
 * @return
 */
function oa_notifications_is_notification_type($node) {
  // @TODO: Implement this as configurable
  return $node->type == 'oa_discussion_post';
}

/**
 * Implements hook_node_delete().
 *
 * Cleanup the notifications for teams and organizations as they are removed.
 *
 * @param $node
 *    The Node being deleted
 */
function oa_notifications_node_delete($node) {
  if ($node->type == OA_TEAM_TYPE) {
    $target_type = 'team';
  }
  else if ($node->type == OA_ORG_TYPE) {
    $target_type = 'organization';
  }

  if (isset($target_type)) {
    oa_notifications_delete_for_target($node->nid, $target_type);
  }
}

/**
 * Delete notifications for a target
 *
 * @param int $id
 *    The target id (e.g. node id)
 * @param string $type
 *    The target type (e.g. 'organization', 'team')
 */
function oa_notifications_delete_for_target($id, $type)
{
  db_delete('oa_notifications')
    ->condition('target_id', $id)
    ->condition('target_type', $type)
    ->execute();
}

/**
 * Callback for AJAX saving of the notification configuration when on a screen with a quick reply.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function oa_notifications_ajax_callback($form, $form_state) {
  oa_notifications_save_notifications($form_state['values']);

  $element = $form_state['triggering_element']['#name'];
  return $form[$element];
}

/**
 * Define the fields that are used for configuring notifications.
 *
 * @param $form
 * @param $form_state
 * @param $node
 */
function oa_notifications_form_fields(&$form, &$form_state, $node) {
  $nid = isset($node->nid) ? $node->nid : NULL;
  $form['source_type'] = array(
    '#type' => 'value',
    '#value' => 'node',
  );
  $form['source_id'] = array(
    '#type' => 'value',
    '#value' => $nid
  );

  $notifications = isset($nid) ? oa_notifications_load_multiple($nid) : array();

  $all_orgs = oa_notifications_get_orgs();
  $form['organization'] = array(
    '#type' => 'select',
    '#title' => t('Organizations'),
    '#multiple' => TRUE,
    '#options' => array_map(create_function('$org', 'return $org->title;'), $all_orgs),
    '#default_value' => array_key_exists('organization', $notifications) ? array_keys($notifications['organization']) : array(),
  );

  $group_teams = oa_notifications_get_teams_for_group();
  $form['team'] = array(
    '#type' => 'select',
    '#title' => t('Teams'),
    '#multiple' => TRUE,
    '#options' => array_map(create_function('$team', 'return $team->title;'), $group_teams),
    '#default_value' => array_key_exists('team', $notifications) ? array_keys($notifications['team']) : array(),
  );

  $group_users = oa_notifications_get_users_for_node($node);
  $form['user'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#multiple' => TRUE,
    '#options' => array_map(create_function('$user', 'return $user->realname;'), $group_users),
    '#default_value' => array_key_exists('user', $notifications) ? array_keys($notifications['user']) : array(),
  );

}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function oa_notifications_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "oa_discussion_post_node_form" && isset($form['nid'])) {
    $form['oa_notifications'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notifications'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );
    oa_notifications_form_fields($form['oa_notifications'], $form_state, $form['#node']);
  }
}
