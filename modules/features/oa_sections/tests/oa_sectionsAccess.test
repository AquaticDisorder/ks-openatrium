<?php

/**
 * @file
 * Tests permission inheritence for oa_subspaces
 */

class oa_sectionsAccess extends oa_coreBaseWebTest {
  static function getInfo() {
    return array(
      'name' => 'OA Section Permission test',
      'description' => 'Test that can access sections correctly',
      'group' => 'OA - Sections',
    );
  }

  function test_oa_sectionsAccess() {
    extract($this->createOaSpaceAndUsers());
    $space_member_2 = $this->createUserInOaSpace($space);
    $group = $this->drupalCreateNode(array('type' => 'oa_group'));
    og_group('node', $group, array('entity' => $space_member));
    $this->oaTestOaSectionAccess('a space', $space, $space_admin, $space_member, $space_member_2, $group);
  }

  /**
   * Tests access to sections.
   *
   * @param $text
   *   Text to use for asserts.
   * @param $test_space
   *   Space to add sections to
   * @param $space_admin
   *   Administer of that space
   * @param $space_member
   *   Member of that space
   * @param $space_member_2
   *   A different member of that space.
   * @param $group_for_section
   *   A group that space member is part of.
   */
  protected function oaTestOaSectionAccess($text, $test_space, $space_admin, $space_member, $space_member_2, $group_for_section = NULL) {
    $this->drupalLogin($space_admin);
    $this->drupalGet('node/' . $test_space->nid);
    $anon = user_load(0);
    $section_public = $this->createNodeInOaSpace($test_space, array('type' => 'oa_section'));
    $section_space_member_only = $this->createNodeInOaSpace($test_space, array('type' => 'oa_section', 'field_oa_user_ref' => array(LANGUAGE_NONE => array(array('target_id' => $space_member->uid)))));
    if ($group_for_section) {
      $section_space_group_only = $this->createNodeInOaSpace($test_space, array('type' => 'oa_section', 'field_oa_group_ref' => array(LANGUAGE_NONE => array(array('target_id' => $group_for_section->nid)))));
    }

    // Test access to public section.
    $this->oaTestOaSectionAccessToSection($text, 'member', 'public', $test_space, $section_public, $space_member, TRUE);
    $this->oaTestOaSectionAccessToSection($text, 'member 2', 'public', $test_space, $section_public, $space_member_2, TRUE);
    $this->oaTestOaSectionAccessToSection($text, 'admin', 'public', $test_space, $section_public, $space_admin, TRUE);
    $this->oaTestOaSectionAccessToSection($text, 'anonymous', 'public', $test_space, $section_public, $anon, TRUE);

    // Test access to private sections.
    $this->oaTestOaSectionAccessToSection($text, 'admin', 'private', $test_space, $section_space_member_only, $space_admin, FALSE);
    $this->oaTestOaSectionAccessToSection($text, 'member', 'private', $test_space, $section_space_member_only, $space_member, TRUE);
    $this->oaTestOaSectionAccessToSection($text, 'member 2', 'private', $test_space, $section_space_member_only, $space_member_2, FALSE);
    $this->oaTestOaSectionAccessToSection($text, 'anonymous', 'private', $test_space, $section_space_member_only, $anon, FALSE);
    if ($group_for_section) {
      $this->oaTestOaSectionAccessToSection($text, 'admin', 'private by group', $test_space, $section_space_group_only, $space_admin, FALSE);
      $this->oaTestOaSectionAccessToSection($text, 'member', 'private by group', $test_space, $section_space_group_only, $space_member, TRUE);
      $this->oaTestOaSectionAccessToSection($text, 'member 2', 'private by group', $test_space, $section_space_group_only, $space_member_2, FALSE);
      $this->oaTestOaSectionAccessToSection($text, 'anonymous', 'private by group', $test_space, $section_space_group_only, $anon, FALSE);
    }
  }


  /**
   * Tests access to a specfic section.
   *
   * @param $space_text
   *   Text to use for asserts.
   * @param $member_text
   *   Text to use for asserts.
   * @param $section_text
   *   Text to use for asserts.
   * @param $space
   *   Space the section is part of.
   * @param $section
   *   Section to test.
   * @param $account
   *   Account to test access for.
   * @param $has_access
   *   Whether $account should have access to this space.
   */
  protected function oaTestOaSectionAccessToSection($space_text, $member_text, $section_text, $space, $section, $account, $has_access) {
    if ($account->uid) {
      $this->drupalLogin($account);
    }
    else {
      $this->drupalLogout();
    }

    // Test node_access directly and viewing section page.
    $this->drupalGet('node/' . $section->nid);
    if ($has_access) {
      $this->assertTrue(node_access('view', $section, $account), t('@member has view access to @section section for @space', array('@space' => $space_text, '@member' => $member_text, '@section' => $section_text)));
      $this->assertResponse(200, t('@member can view @section section for @space', array('@space' => $space_text, '@member' => $member_text, '@section' => $section_text)));

    }
    else {
      $this->assertFalse(node_access('view', $section, $account), t('@member does not have view access to @section section for @space', array('@space' => $space_text, '@member' => $member_text, '@section' => $section_text)));
      $this->assertResponse(403, t('@member cannot view @section section for @space', array('@space' => $space_text, '@member' => $member_text, '@section' => $section_text)));
    }

    // Test listing of sections (by viewing space homepage)
    $this->drupalGet('node/' . $space->nid);
    if ($has_access) {
      $this->assertText($section->title,  t('@member can view @section section on @space homepage', array('@space' => $space_text, '@member' => $member_text, '@section' => $section_text)));
    }
    else {
      $this->assertNoText($section->title,  t('@member cannot view @section section on @space homepage', array('@space' => $space_text, '@member' => $member_text, '@section' => $section_text)));
    }
  }

}
