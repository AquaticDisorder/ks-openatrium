<?php
/**
 * @file
 * Code for the OpenAtrium2 Groups feature.
 */

include_once 'oa_groups.features.inc';

/**
 * Name of default OpenAtrium Group type.
 */
define('OA_GROUP_TYPE', 'oa_group');
/**
 * Name of OpenAtrium Section content type.
 */
define('OA_SECTION_TYPE', 'oa_section');
/**
 * Name of OpenAtrium Organization content type.
 */
define('OA_ORG_TYPE', 'oa_organization');
/**
 * Name of OpenAtrium Team content type.
 */
define('OA_TEAM_TYPE', 'oa_team');
/**
 * Name of default OpenAtrium Section field (for Organic Groups Fields UI).
 */
define('OA_SECTION_FIELD', 'oa_section_ref');
/**
 * Name of default OpenAtrium Group field (for Organic Groups Fields UI).
 */
define('OA_GROUP_FIELD', 'og_group_ref');
/**
 * Name of default OpenAtrium Organization field (for Organic Groups Fields UI).
 */
define('OA_ORG_FIELD', 'field_oa_organization_ref');
/**
 * Name of default OpenAtrium Team field (for Organic Groups Fields UI).
 */
define('OA_TEAM_FIELD', 'field_oa_team_ref');
/**
 * The access realm of group member.
 */
define('OA_ACCESS_REALM', 'oa_access');


/**
 * Determine if a user is a member of a team
 * @param  int $team_id
 * @param  int $user_id
 * @return boolean TRUE if user is in team
 */
function oa_groups_member_of_team($team_id, $user_id) {
  static $cache = array();

  if (!isset($cache[$team_id][$user_id])) {
    $result = db_select('field_data_field_oa_team_users', 'f')
      ->fields('f', array('field_oa_team_users_target_id'))
      ->condition('field_oa_team_users_target_id', $user_id)
      ->condition('entity_type', 'node')
      ->condition('entity_id', $team_id)
      ->condition('deleted', 0)
      ->execute();
    if ($result->rowCount() > 0) {
      print "In team<br>\n";
      $access = TRUE;
    }
    else {
      // not explicitly in team, but check ownership of team node
      // do NOT use node_load as this is called from hook_node_grants()
      $result = db_select('node', 'n')
        ->fields('n', array('uid'))
        ->condition('nid', $team_id)
        ->execute()
        ->fetchAssoc();
      $access = ($result['uid'] == $user_id) ? TRUE : FALSE;
      print "Owner<br>\n";
    }
    $cache[$team_id][$user_id] = $access;
  }

  return $cache[$team_id][$user_id];
}

/**
 * Determine access to a Open Atrium Section
 * do NOT use node_load here as it gets called from hook_node_grants()
 */
function oa_groups_section_access($row, $groups, $account) {

  $gid = $row['field_oa_organization_ref_target_id'];
  $team_id = $row['field_oa_team_ref_target_id'];
  $user_id = $row['field_oa_user_ref_target_id'];

print "GID: $gid  Team: $team_id  User: $user_id<br>\n";
  // check if no access fields are set
  if (is_null($gid) && is_null($team_id) && is_null($user_id)) {
    print "Allow, no access<br>\n";
    return NODE_ACCESS_ALLOW;
  }

  // Test Organization membership
  if (!is_null($gid) && !empty($groups['node'])) {
    if (in_array($gid, $groups['node'])) {
    print "Allow Org<br>\n";
      return NODE_ACCESS_ALLOW;
    }
  }

  // Test Team membership
  if (!is_null($team_id)) {
    if (oa_groups_member_of_team($team_id, $account->uid)) {
    print "Allow Team<br>\n";
      return NODE_ACCESS_ALLOW;
    }
  }

  // Test User membership
  if (!is_null($user_id)) {
    if ($user_id == $account->uid) {
    print "Allow user<br>\n";
      return NODE_ACCESS_ALLOW;
    }
  }

  // none of the organizations, teams, or users allowed access, so deny access
    print "Deny<br>\n";
  return NODE_ACCESS_DENY;
}

/**
 * Implements hook_node_grants().
 * Define node access grant realm for Open Atrium sections
 */
function oa_groups_node_grants($account, $op) {
  static $cache = array();

  if ($op != 'view') {
    return;
  }

  if (isset($cache[$account->uid])) {
    return $cache[$account->uid];
  }
  $member_groups = og_get_entity_groups('user', $account);
  // add the list of public groups that user might not be explicitly
  // a member of, but can access content within
  $groups = array_merge($member_groups, oa_get_public_groups());
  if (!empty($groups['node'])) {
    // get the list of all section nodes assigned to the list of groups
    $query = db_select('node', 'n');
    $query->join('og_membership', 'og', 'n.nid = og.etid');
    $query
      ->fields('n', array('nid'))
      ->condition('n.type', OA_SECTION_TYPE)
      ->condition('og.entity_type', 'node')
      ->condition('og.field_name', OA_GROUP_FIELD)
      ->condition('og.gid', $groups['node'], 'IN');
    $result = $query->execute();
    // get a list of sections that don't have any access fields
    // loop through each result to determine access to section
    $result = $query->execute();
    $sections = $result->fetchCol(0);

    // do a big complex query to grab all section access fields
    // might be a way to merge this with the previous query
    // but it makes my brain hurt
    $query = db_select('node', 'n');
    // we join with the Organizations, Teams, Users fields
    $query->leftJoin('field_data_field_oa_organization_ref', 'o', "n.nid = o.entity_id AND o.entity_type = 'node'");
    $query->leftJoin('field_data_field_oa_team_ref', 't', "n.nid = t.entity_id AND t.entity_type = 'node'");
    $query->leftJoin('field_data_field_oa_user_ref', 'u', "n.nid = u.entity_id AND u.entity_type = 'node'");
    $query
      ->fields('n', array('nid'))
      ->fields('o', array('field_oa_organization_ref_target_id'))
      ->fields('t', array('field_oa_team_ref_target_id'))
      ->fields('u', array('field_oa_user_ref_target_id'))
      ->condition('n.type', OA_SECTION_TYPE)
      ->condition('n.nid', $sections, 'IN');
    $result = $query->execute();

    while ($row = $result->fetchAssoc()) {
      $sid = $row['nid'];
      // only check detailed access for non-public sections
      $access = oa_groups_section_access($row, $member_groups, $account);
      print "Node: $sid  Access: $access<br>\n";
      if (($access == NODE_ACCESS_ALLOW) || ($access == NODE_ACCESS_IGNORE)) {
        $grants[OA_ACCESS_REALM][] = $sid;
      }
    }
  }

  $cache[$account->uid] = !empty($grants) ? $grants : array();
  return $cache[$account->uid];
}

/**
 * Implements hook_node_access_records().
 */
function oa_groups_node_access_records($node) {
  $sids = array();
  if ($node->type == OA_SECTION_TYPE) {
    $sids[] = $node->nid;
  }
  // Look for the default section reference
  else if (!empty($node->{OA_SECTION_FIELD})) {
    foreach ($node->{OA_SECTION_FIELD}[LANGUAGE_NONE] as $entity_ref) {
      $sids[] = $entity_ref['target_id'];
    }
  }
  if (empty($sids)) {
    return array();
  }

  foreach ($sids as $sid) {
    $grants[] = array (
      'realm' => OA_ACCESS_REALM,
      'gid' => $sid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }

  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_og_fields_info().
 */
function oa_groups_og_fields_info() {
  $items[OA_SECTION_FIELD] = array(
    'no ui' => TRUE,
    'type' => array('group content'),
    'description' => t('Determine to which Open Atrium section this group content is assigned to.'),
    'field' => array(
      'field_name' => OA_SECTION_FIELD,
      'type' => 'entityreference',
      'cardinality' => 1,
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'type' => 'none',
          ),
          'target_bundles' => array(
            OA_SECTION_TYPE => OA_SECTION_TYPE,
          ),
        ),
        'target_type' => 'node',
      ),
      'translatable' => '0',
      'type' => 'entityreference',
    ),
    'instance' => array(
      'label' => t('Open Atrium Section'),
      'widget' => array(
        'active' => 0,
        'module' => 'options',
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'path' => '',
          'size' => 60,
        ),
        'type' => 'options_select',
        'weight' => '7',
      ),
    ),
  );

  return $items;
}

/**
 * Returns a list of content types throughout the system. List
 *   leaves out content types specified by other modules/apps.
 *
 * @return array of strings denoting content types marked for omission
 */
function oa_groups_list_content_types() {
  $nodes = node_type_get_types();

  // Queries hook_oa_omit_content_types to determine what content types
  //   modules wants to hide.
  $deny = module_invoke_all('oa_omit_content_types');
  if (!empty($deny)) {
    foreach ($deny as $remove) {
      unset($nodes[$remove]);
    }
  }

  return $nodes;
}

/**
 * Helper function to retrieve an array of node titles and links given
 * a list of node ids
 * @param  array  $ids array of node ids to fetch
 * @param  string $type optional node type to filter
 * @return array      associative array:
 *   'titles' is a list of node titles (clean)
 *   'links' is a list of node links
 *   'ids' is a list of the node ids
 */
function oa_groups_get_titles($ids = array(), $type = '') {
  $items = array('titles' => array(), 'links' => array(), 'ids' => array());
  if (!empty($ids)) {
    $query = db_select('node', 'n');
    $query
      ->fields('n', array('nid', 'title'))
      ->condition('n.nid', $ids, 'IN');
    if (!empty($type)) {
      $query->condition('n.type', $type);
    }
    $result = $query->execute();
    while ($row = $result->fetchAssoc()) {
      $items['ids'][]    = $row['nid'];
      $items['titles'][] = check_plain($row['title']);
      $items['links'][]  = l($row['title'], 'node/' . $row['nid']);
    }
  }
  return $items;
}

/**
 * truncate a list to a given number of items with optional More link
 * @param  array $list      array to be truncated
 * @param  int $count     number of items desired
 * @param  string $more_link optional "More" link added to end of array
 * @return array            new list of items
 */
function oa_groups_truncate_list($list, $count, $more_link = '') {
  $new_list = array_slice($list, 0, $count);
  if (!empty($more_link) && (count($list) != count($new_list))) {
    $new_list[] = $more_link;
  }
  return $new_list;
}

/**
 * Return a list of public groups
 * since og_get_entity_groups doesn't return anything for anonymous users
 * @return array array['node'] contains array of public gids
 */
function oa_get_public_groups() {
  $query = db_select('field_data_group_access', 'g')
    ->fields('g', array('entity_id'))
    ->condition('bundle', OA_GROUP_TYPE)
    ->condition('entity_type', 'node')
    ->condition('group_access_value', 0);
  $result['node'] = $query->execute()->fetchCol(0);
  return $result;
}

/**
 * Return a list of sections within a group
 * Uses access control, so only sections with access are returned
 * @param  int $gid Group ID
 * @return keyed array of section data: $array[$nid] = $title
 */
function oa_groups_group_sections($gid) {
  $query = db_select('node', 'n');
  $query->rightJoin('og_membership', 'og', 'n.nid = og.etid');
  $query
    ->fields('n', array('nid', 'title'))
    ->condition('n.type', OA_SECTION_TYPE)
    ->condition('og.entity_type', 'node')
    ->condition('og.field_name', OA_GROUP_FIELD)
    ->condition('og.gid', $gid)
    ->addTag('node_access');
  $result = $query->execute();
  return $result->fetchAllKeyed(0, 1);
}

