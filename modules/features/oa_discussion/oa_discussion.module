<?php
/**
 * @file
 * Code for the OpenAtrium Discussion feature.
 */

include_once 'oa_discussion.features.inc';
include_once 'oa_discussion.theme.inc';

/*
 * Implements hook_ctools_plugin_directory
 */
function oa_discussion_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_views_data().
 */
function oa_discussion_views_data() {
  $data = array();
  $data['field_data_oa_parent'] = array(
    'table' => array(
      'group' => t('Open Atrium'),
    )
  );
  // Adds our field in the "Filters" section of Views
  $data['field_data_oa_parent']['entity_id']['argument'] = array(
    'title' => 'Parent ID (Content)',
    'help' => 'Filter on the parent node id.',
    'handler' => 'views_handler_argument_oa_parent_id',
  );
  return $data;
}

/**
 * Implements hook_form_alter
 */
function oa_discussion_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ((arg(1) == 'add') && (arg(2) == 'oa-discussion-post')) {
    $parent_id = arg(3);
    // we are in an node/add form
    // Set the Parent field if we have an argument passed to us
    $node = node_load($parent_id);
    if (!empty($node)) {
      // don't allow a child of a child...single level structure
      $parent_parent = field_get_items('node', $node, 'oa_parent');
      if (!empty($parent_parent[0]['target_id'])) {
        $parent_id = $parent_parent[0]['target_id'];
      }
      if (isset($form['oa_parent']) &&
        empty($form['oa_parent'][LANGUAGE_NONE]['#default_value'])) {
        $form['oa_parent'][LANGUAGE_NONE]['#default_value'] = $parent_id;
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 * Change contextual filters to OR, to get both parent and children discussions.
 */
function oa_discussion_views_query_alter(&$view, &$query) {
  if ($view->current_display == 'attachments') {
//    $query->where[0]['type'] = 'OR';
  }
}

/**
 * Implementation of hook_preprocess_views_view_fields()
 * Perform field-level replacement/processing here
 */
function oa_discussion_preprocess_views_view_fields(&$vars) {
  switch ($vars['view']->current_display) {
    case 'replies':
      // determine if the is the specific reply we are looking at
      $nid = arg(1);
      $vars['current'] = ($nid == $vars['fields']['nid']->raw);
      $vars['current_class'] = ($vars['current']) ? 'current-node' : '';
      // determine if accordian for this row should be expanded
      // (add "in" class to bootstrap accordian)
      $vars['in'] = '';
      if ((strlen(trim(strip_tags($vars['fields']['timestamp']->content))) > 0) || $vars['current']) {
        $vars['in'] = 'in';
      }
      break;

    case 'original_post':
      // determine if the is the specific reply we are looking at
      $nid = arg(1);
      $vars['current'] = ($nid == $vars['fields']['nid']->raw);
      $vars['current_class'] = ($vars['current']) ? 'current-node' : '';
      break;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function oa_discussion_views_pre_render(&$view) {
  // Hide results that don't contain attachments or media. This is not done
  // by a views filter because we need to increment per result to get comment #.
  if ($view->name == 'open_atrium_discussions' && $view->current_display == 'attachments') {
    $count = count($view->result);
    for ($i = 0; $i < $count; $i++) {
      if (empty($view->result[$i]->field_field_oa_media)) {
        unset($view->result[$i]);
      }
    }
  }
}

/**
 * Implements hook_oa_messages_type_alter
 * Override the oa_create message for discussion replies
 */
function oa_discussion_oa_messages_type_alter(&$message_type, $context) {
  if ($message_type == 'oa_create') {
    $entity_wrapper = $context['entity_wrapper'];
    if (isset($entity_wrapper->oa_parent)) {
      // just tells us the field exists, not if it points to a node
      $parent = $entity_wrapper->oa_parent->value();
      // cannot use isset directly on wrapper->parent->value() unfortunately
      if (isset($parent)) {
        $message_type = 'oa_reply';
      }
    }
  }
}
