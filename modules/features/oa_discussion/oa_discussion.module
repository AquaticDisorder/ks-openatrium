<?php
/**
 * @file
 * Code for the OpenAtrium Discussion feature.
 */

include_once 'oa_discussion.features.inc';
include_once 'oa_discussion.theme.inc';

/*
 * Implements hook_ctools_plugin_directory
 */
function oa_discussion_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implementation of hook_menu
 */
function oa_discussion_menu() {

  $items['node/%node/remove'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'oa_discussion_remove',
    'page arguments' => array(1),
    'access arguments' => array('create oa discussion post content'),
  );
  $items['node/%node/publish'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'oa_discussion_publish',
    'page arguments' => array(1),
    'access arguments' => array('create oa discussion post content'),
  );
  $items['ajax/mark-read/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'oa_discussion_mark_as_read',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_views_data().
 * Define a custom views contextual filter for Parent node
 */
function oa_discussion_views_data() {
  $data = array();
  $data['field_data_oa_parent'] = array(
    'table' => array(
      'group' => t('Open Atrium'),
    )
  );
  // Adds our field in the "Filters" section of Views
  $data['field_data_oa_parent']['entity_id']['argument'] = array(
    'title' => 'Parent ID (Content)',
    'help' => 'Filter on the parent node id.',
    'handler' => 'views_handler_argument_oa_parent_id',
  );
  return $data;
}

function oa_discussion_remove($node) {
  if (!empty($node)) {
    $node->status = 0; // unpublish;
    node_save($node);
  }
  drupal_set_message(t("Content '@title' removed.", array('@title' => $node->title)));
  drupal_goto('node/' . $node->nid);
}

function oa_discussion_publish($node) {
  if (!empty($node)) {
    $node->status = 1; // publish;
    node_save($node);
  }
  drupal_set_message(t("Content '@title' published.", array('@title' => $node->title)));
  drupal_goto('node/' . $node->nid);
}

/**
 * Implementation of hook_preprocess_views_view_fields()
 * Perform field-level replacement/processing here
 */
function oa_discussion_preprocess_views_view_fields(&$vars) {
  if ($vars['view']->name == 'open_atrium_discussions') {
    // set variables for all displays
    // determine if the is the specific reply we are looking at

    if (isset($vars['fields']['nid'])) {
      $nid = arg(1);
      $vars['current'] = ($nid == $vars['fields']['nid']->raw);
      $vars['current_class'] = ($vars['current']) ? 'current-node' : '';
      $vars['nid_class'] = 'nid-' . $vars['fields']['nid']->raw;

      if (isset($vars['fields']['status'])) {
        $status = $vars['fields']['status']->raw;
        $vars['status_class'] = ($status == 1) ? 'published' : 'unpublished';
        $vars['unpublished'] = ($status == 1) ? '' : t('Not Published');
        $vars['remove_link'] = ($status == 1)
          ? l(t('remove'), 'node/' . $vars['fields']['nid']->raw . '/remove')
          : l(t('publish'), 'node/' . $vars['fields']['nid']->raw . '/publish');
      }
    }

    // variables for specific displays
    switch ($vars['view']->current_display) {
      case 'replies':
        // determine if accordian for this row should be expanded
        // (add "in" class to bootstrap accordian)
        $vars['in'] = '';
        if ((strlen(trim(strip_tags($vars['fields']['timestamp']->content))) > 0) || $vars['current']) {
          $vars['in'] = 'in';
        }

        break;

      case 'original_post':
        break;

      case 'attachments':
        break;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function oa_discussion_views_pre_render(&$view) {
  // Hide results that don't contain attachments or media. This is not done
  // by a views filter because we need to increment per result to get comment #.
  if ($view->name == 'open_atrium_discussions' && $view->current_display == 'attachments') {
    $count = count($view->result);
    for ($i = 0; $i < $count; $i++) {
      if (empty($view->result[$i]->field_field_oa_media)) {
        unset($view->result[$i]);
      }
    }
  }
}

/**
 * Implements hook_oa_messages_type_alter
 * Override the oa_create message for discussion replies
 */
function oa_discussion_oa_messages_type_alter(&$message_type, $context) {
  if ($message_type == 'oa_create') {
    $entity_wrapper = $context['entity_wrapper'];
    if (isset($entity_wrapper->oa_parent)) {
      // just tells us the field exists, not if it points to a node
      $parent = $entity_wrapper->oa_parent->value();
      // cannot use isset directly on wrapper->parent->value() unfortunately
      if (isset($parent)) {
        $message_type = 'oa_reply';
      }
    }
  }
}


/**
 * Menu callback for ajax/mark-read/%. Marks the node as read by the user.
 */
function oa_discussion_mark_as_read($nids) {
  $nids = explode(',', $nids);
  foreach ($nids as $nid) {
    node_tag_new(node_load($nid));
  }
}
