<?php
/**
 * @file
 * Code for the Open Atrium Messages feature.
 */

include_once 'oa_messages.features.inc';

/**
 * Implements hook_node_insert().
 */
function oa_messages_node_insert($node) {
  return;
  $types = oa_list_content_types();
  if (!array_key_exists($node->type, $types)) {
    // only create messages for node types we care about
    return;
  }
  $message_type = 'oa_created';
  $account = user_load($node->uid);
  $message = message_create($message_type, array('uid' => $account->uid, 'timestamp' => $node->created));
  // Save reference to the node in the node reference field.
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node_ref->set($node);
  $wrapper->save();
  $options = array(
    'rendered fields' => array(
      'message_notify_email_subject' => 'field_message_rendered_subject',
      'message_notify_email_body' => 'field_message_rendered_body',
    ),
  );
  message_subscribe_process_message('node', $node, $message, array('email' => $options));
}

function oa_messages_node_update($node) {
  return;
  dsm('Updating');
  dsm($node);
  $types = oa_list_content_types();
  dsm($types);
  if (!array_key_exists($node->type, $types)) {
    // only create messages for node types we care about
    dsm('Returning');
    return;
  }
  $message_type = 'oa_update';
  $account = user_load($node->uid);
  dsm('Creating message');
  $message = message_create($message_type, array('uid' => $account->uid, 'timestamp' => $node->created));
  // Save reference to the node in the node reference field.
  dsm($message);
  $wrapper = entity_metadata_wrapper('message', $message);
  dsm($wrapper);
//  $wrapper->field_node_ref->set($node);
  $wrapper->save();
  $options = array(
    'rendered fields' => array(
      'message_notify_email_subject' => 'field_message_rendered_subject',
      'message_notify_email_body' => 'field_message_rendered_body',
    ),
  );
  message_subscribe_process_message('node', $node, $message, array('email' => $options));
}

function oa_messages_node_delete($node) {
  return;
  $types = oa_list_content_types();
  if (!array_key_exists($node->type, $types)) {
    // only create messages for node types we care about
    return;
  }
  $message_type = 'oa_deleted';
  $account = user_load($node->uid);
  $message = message_create($message_type, array('uid' => $account->uid, 'timestamp' => $node->created));
  // Save reference to the node in the node reference field.
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node_ref->set($node);
  $wrapper->save();
  $options = array(
    'rendered fields' => array(
      'message_notify_email_subject' => 'field_message_rendered_subject',
      'message_notify_email_body' => 'field_message_rendered_body',
    ),
  );
  message_subscribe_process_message('node', $node, $message, array('email' => $options));
}
