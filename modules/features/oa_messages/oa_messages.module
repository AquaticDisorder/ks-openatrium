<?php
/**
 * @file
 * Code for the Open Atrium Messages feature.
 */

include_once 'oa_messages.features.inc';

/**
 * Helper function to create a specific message type
 * Fills in the wrapper fields for group and section
 * @param  string $message_type machine name of message
 * @param int     $entity entity or entity_id of entity being referenced
 * @param string  $entity_type type of entity being referenced
 * @param string  $text optional text to be added to message
 * @param array   $args optional data to send to hooks
 * @param boolean $send TRUE/FALSE to trigger notifications
 * @return object               the message entity created
 */
function oa_messages_create($message_type, $entity = NULL, $entity_type = 'node', $text = '', $args = NULL, $send = TRUE) {
  global $user;

  if (!empty($entity) && !is_object($entity)) {
    $entity_id = $entity;
    $entity = array_shift( entity_load($entity_type, array($entity_id)));
  }
  else {
    $entity_info = entity_get_info($entity_type);
    $entity_id = $entity->{$entity_info['entity keys']['id']};
  }
  if ($entity_type == 'user') {
    $account = $entity;
  }
  else if (isset($entity->uid)) {
    $account = user_load($entity->uid);
  }
  else {
    $account = $user;
  }

  // allow other modules to alter the message type to be created
  $context = array(
    'account' => $account,
    'entity' => $entity,
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'text' => $text,
    'arguments' => $args,
  );
  drupal_alter('oa_messages_type', $message_type, $context);
  if (!empty($message_type)) {
    $message = message_create($message_type, array('uid' => $account->uid, 'timestamp' => time()));

    // Save reference to the node in the node reference field.
    $wrapper = entity_metadata_wrapper('message', $message);
    $entity_wrapper  = entity_metadata_wrapper($entity_type, $entity_id);
    if (isset($entity_wrapper->{OA_GROUP_FIELD})) {
      $wrapper->field_oa_message_group = $entity_wrapper->{OA_GROUP_FIELD}->value();
    }
    if (isset($entity_wrapper->{OA_SECTION_FIELD})) {
      $wrapper->field_oa_message_section = $entity_wrapper->{OA_SECTION_FIELD}->value();
    }
    if (!empty($text)) {
      $wrapper->field_oa_message_text->set(array('value' => $text, 'format' => 'full_html'));
    }
    if ($entity_type == 'node') {
      if (isset($wrapper->field_oa_node_ref)) {
        $wrapper->field_oa_node_ref = $entity_id;
      }
    }

    // allow other modules to add stuff to the wrapper
    $context += array(
      'message_type' => $message_type,
      'message' => $message,
      'entity_wrapper' => $entity_wrapper,
    );

    drupal_alter('oa_messages_create', $wrapper, $context);

    $wrapper->save();

    if ($send && isset($node)) {
      $options = array(
        'rendered fields' => array(
          'message_notify_email_subject' => 'field_message_rendered_subject',
          'message_notify_email_body' => 'field_message_rendered_body',
        ),
      );
      message_subscribe_process_message('node', $node, $message, array('email' => $options));
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function oa_messages_node_insert($node) {
  $types = oa_groups_list_content_types(TRUE);
  if (!array_key_exists($node->type, $types)) {
    // only create messages for node types we care about
    return;
  }
  $message = oa_messages_create('oa_create', $node);
}

function oa_messages_node_update($node) {
  $types = oa_groups_list_content_types(TRUE);
  if (!array_key_exists($node->type, $types)) {
    // only create messages for node types we care about
    return;
  }
  $message = oa_messages_create('oa_update', $node, 'node', t('Changes:'));
}

function oa_messages_node_delete($node) {
  $types = oa_groups_list_content_types(TRUE);
  if (!array_key_exists($node->type, $types)) {
    // only create messages for node types we care about
    return;
  }
  $message = oa_messages_create('oa_delete', $node);
}

/**
 * Implements hook_og_membership_insert().
 */
function oa_messages_og_membership_insert($og_membership) {
  if ($og_membership->entity_type == 'user') {
    $group = node_load($og_membership->gid);
    $message = oa_messages_create('oa_member', $og_membership->etid, 'user',
      t('added to ' . $group->type), $og_membership->gid);
  }
}

/**
 * Implements hook_og_membership_update().
 */
function oa_messages_og_membership_update($og_membership) {
  if ($og_membership->entity_type == 'user') {
    if ($og_membership->original->state != OG_STATE_ACTIVE && $og_membership->state == OG_STATE_ACTIVE) {
      $message = oa_messages_create('oa_member', $og_membership->etid, 'user',
        'approved', $og_membership->gid);
    }
    if ($og_membership->original->state != OG_STATE_BLOCKED && $og_membership->state == OG_STATE_BLOCKED) {
      $message = oa_messages_create('oa_member', $og_membership->etid, 'user',
        'blocked', $og_membership->gid);
    }
  }
}

/**
 * Implements hook_og_membership_delete().
 */
function oa_messages_og_membership_delete($og_membership) {
  if ($og_membership->entity_type == 'user') {
    $group = node_load($og_membership->gid);
    $message = oa_messages_create('oa_member', $og_membership->etid, 'user',
      t('removed from ' . $group->type), $og_membership->gid);
  }
}

/**
 * Implements hook_oa_messages_create_alter
 * Add additional fields to wrapper for messages
 */
function oa_messages_oa_messages_create_alter(&$wrapper, $context) {
  switch ($context['message_type']) {
    case 'oa_delete':
      // save some values from the node that is about to be deleted
      $entity_wrapper = $context['entity_wrapper'];
      if (isset($wrapper->field_deleted_title)) {
        $wrapper->field_deleted_title = $entity_wrapper->title->value();
      }
      if (isset($wrapper->field_deleted_summary)) {
        $body_value = field_view_field($context['entity_type'], $context['entity'], 'body', array(
            'label'=>'hidden',
            'type' => 'text_summary_or_trimmed',
          ));
        $wrapper->field_deleted_summary->set(array('value' => render($body_value)));
      }
      break;

    case 'oa_update':
      if (($context['entity_type'] == 'node') && isset($context['entity'])) {
        $node = $context['entity'];
        if ($node->type == 'oa_team') {
          // modify message when changing membership in a team
          $old_users = field_get_items('node', $node->original, 'field_oa_team_users');
          $new_users = field_get_items('node', $node, 'field_oa_team_users');
          $output = theme('oa_team_update', array(
            'old_users' => $old_users,
            'new_users' => $new_users,
          ));

          // override normal message text with themed team diff
          $wrapper->field_oa_message_text->set(array('value' => $output, 'format' => 'full_html'));
        }
      }
      break;

    case 'oa_member':
      if (isset($wrapper->field_member_action)) {
        $wrapper->field_member_action = $context['arguments']['action'];
      }
      $wrapper->field_oa_message_group = $context['arguments']['group'];
      break;
  }
}

/**
 * Implements hook_theme()
 */
function oa_messages_theme() {
  return array(
    'oa_team_update' => array(
      'variables' => array('old_users' => array(), 'new_users' => array()),
    ),
  );
}
/**
 * Theme function for showing who is added and removed from team
 * @param  $vars['old_users'] the old value of field_oa_team_users
 * @return $vars['new_users'] the new value of field_oa_team_users
 */
function theme_oa_team_update($vars) {
  $old_users = $vars['old_users'];
  $new_users = $vars['new_users'];

  // convert values of field into a simple array of uids
  $old = array();
  $new = array();
  foreach ($old_users as $item) {
    $old[] = $item['target_id'];
  }
  foreach ($new_users as $item) {
    $new[] = $item['target_id'];
  }

  // grab all user's real names
  $uids = array_merge($old, $new);
  $users = entity_load('user', $uids);
  foreach ($users as $uid => $user) {
    // handle case where realname isn't set or installed
    if (empty($user->realname)) {
      $users[$uid]->realname = $user->name;
    }
  }

  $output = '';

  // determine who was added
  $diff = array_diff($new, $old);
  $add_links = array();
  foreach ($diff as $uid) {
    $add_links[] = l($users[$uid]->realname, 'users/' . $uid);
  }
  if (!empty($add_links)) {
    $output .= t('Added ') . implode(', ', $add_links) . '. ';
  }

  // determine who was removed
  $diff = array_diff($old, $new);
  $remove_links = array();
  foreach ($diff as $uid) {
    $remove_links[] = l($users[$uid]->realname, 'users/' . $uid);
  }
  if (!empty($remove_links)) {
    $output .= t('Removed ') . implode(', ', $remove_links) . '. ';
  }

  return $output;
}
