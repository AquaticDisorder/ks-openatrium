<?php
/**
 * @file
 * Code for the Open Atrium Command Buttons feature.
 */

include_once 'oa_buttons.features.inc';

/**
 * Implements hook_menu().
 */
function oa_buttons_menu() {
  $base = array(
    'access arguments' => array('administer command buttons'),
    'file' => 'oa_buttons.admin.inc',
  );

  $items['admin/structure/command-buttons'] = array(
    'title' => 'Command Buttons',
    'description' => 'Manage command button types.',
    'page callback' => 'oa_buttons_entities_page',
  ) + $base;

  $items['admin/structure/command-buttons/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $base;

  $items['admin/structure/command-buttons/manage/%oa_buttons_type'] = array(
    'title callback' => 'oa_buttons_entities_title',
    'title arguments' => array(4),
    'page callback' => 'oa_buttons_entities_list_page',
    'page arguments' => array(4),
  ) + $base;

  $items['admin/structure/command-buttons/manage/%oa_buttons_type/add'] = array(
    'title' => 'Add a command button',
    'page callback' => 'oa_buttons_entities_add_page',
    'page arguments' => array(4),
    'type' => MENU_NORMAL_ITEM,
  ) + $base;

  $items['admin/structure/command-buttons/view/%oa_buttons'] = array(
    'title callback' => 'oa_buttons_entity_title',
    'title arguments' => array(4),
    'page callback' => 'oa_buttons_view',
    'page arguments' => array(4),
    'access callback' => 'oa_buttons_access',
    'access arguments' => array('view', 4),
  ) + $base;

  $items['admin/structure/command-buttons/view/%oa_buttons/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'oa_buttons_view',
    'page arguments' => array(4),
    'access callback' => 'oa_buttons_access',
    'access arguments' => array('view', 4),
    'weight' => -10,
  ) + $base;

  $items['admin/structure/command-buttons/view/%oa_buttons/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'oa_buttons_entity_edit_page',
    'page arguments' => array(4),
    'access callback' => 'oa_buttons_access',
    'access arguments' => array('update', 4),
    'weight' => -9,
  ) + $base;

  $items['admin/structure/command-buttons/view/%oa_buttons/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oa_buttons_entity_delete_form', 4),
    'access callback' => 'oa_buttons_access',
    'access arguments' => array('delete', 4),
    'weight' => -8,
  ) + $base;

  if (module_exists('devel')) {
    $items['admin/structure/command-buttons/view/%oa_buttons/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('oa_button', 4),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
      'file' => 'devel.pages.inc',
      'file path' => drupal_get_path('module', 'devel'),
    );

    $items['admin/structure/command-buttons/view/%oa_buttons/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    $items['admin/structure/command-buttons/view/%oa_buttons/devel/render'] = array(
      'title' => 'Render',
      'page callback' => 'devel_render_object',
      // Normally this would be the name of the entity type, but slightly
      // modified in order to call the right function.
      'page arguments' => array('oa_buttons', 4),
      'access arguments' => array('access devel information'),
      'file' => 'devel.pages.inc',
      'file path' => drupal_get_path('module', 'devel'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );
  }

  return $items;
}

/**
 * Implementation of hook_entity_info_alter()
 */
function oa_buttons_entity_info_alter(&$entity_info) {

  // Command List
  $entity_info['fieldable_panels_pane']['bundles']['command_buttons'] = array(
    'label' => t('Add Command List'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_link.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/command-buttons',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Properly format the type from the URL version to the internal version.
 */
function oa_buttons_type_load($type) {
  $type = str_replace('-', '_', $type);
  $entity_info = entity_get_info('oa_button');

  if (isset($entity_info['bundles'][$type])) {
    return $type;
  }
}

/**
 * Button entity loader.
 *
 * @see entity_load().
 */
function oa_buttons_load($fpid) {
  if (!is_numeric($fpid)) {
    return FALSE;
  }
  $conditions = array();

  $entities = oa_buttons_load_multiple(array($fpid), $conditions);
  if ($entities) {
    return reset($entities);
  }
}

/**
 * Load multiple OA buttons.
 *
 * @see entity_load_multiple().
 */
function oa_buttons_load_multiple($ids, $conditions = array(), $reset = FALSE) {
  return entity_load('oa_button', $ids, $conditions, $reset);
}

/**
 * Implements hook_permission()
 */
function oa_buttons_permission() {
  $perms = array(
    'administer command buttons' => array(
      'title' => t('Administer command buttons'),
      'description' => t('Allows users to add and manage command buttons.'),
    ),
  );

  $entity_info = entity_get_info('oa_button');
  foreach ($entity_info['bundles'] as $bundle => $info) {
    $perms["create button $bundle"] = array(
      'title' => t('Create new %type', array('%type' => $info['label'])),
      'description' => t('Allows users to create new command buttons of bundle %type.', array('%type' => $info['label'])),
    );
    $perms["edit button $bundle"] = array(
      'title' => t('Edit %type', array('%type' => $info['label'])),
      'description' => t('Allows users to edit command buttons of bundle %type. This is a minimum permission; it is required to be able to edit a command button at all, but higher access requirements on an individual button can override it.', array('%type' => $info['label'])),
    );
    $perms["delete button $bundle"] = array(
      'title' => t('Delete %type', array('%type' => $info['label'])),
      'description' => t('Allows users to delete command buttons of bundle %type.', array('%type' => $info['label'])),
    );
  }


  return $perms;
}

/**
 * Impliments hook_crud_hook_entity_info().
 */
function oa_buttons_entity_info() {
  $return = array(
    'oa_button' => array(
      'label' => t('Command Button'),
      'entity class' => 'Entity',
      'controller class' => 'ButtonController',
      'module' => 'oa_buttons',
      'base table' => 'oa_buttons',
      'fieldable' => TRUE,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'bid',
        'name' => 'name',
        'bundle' => 'bundle',
        'label' => 'title',
      ),
      'view callback' => 'entity_metadata_view_single',
      'creation callback' => 'oa_buttons_create',
      'access callback' => 'oa_buttons_access',
      'save callback' => 'oa_buttons_save',
      'bundles' => array(
        'button' => array(
          'label' => t('Command Button'),
          'admin' => array(
            'path' => 'admin/structure/command-buttons/manage/%oa_buttons_type',
            'bundle argument' => 4,
            'real path' => 'admin/structure/command-buttons/manage/button',
            'access arguments' => array('administer command buttons'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label'  => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  return $return;
}
/**
 * Implements hook_fied_extra_fields().
 */
function oa_buttons_field_extra_fields() {
  $extra = array();

  $entity_info = entity_get_info('oa_button');
  foreach ($entity_info['bundles'] as $bundle => $info) {
    $extra['oa_button'][$bundle] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The displayed title of the entity.'),
          'weight' => -5,
        ),
      ),
      'display' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The displayed title of the entity.'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_views_api
 */
function oa_buttons_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'oa_buttons') . '/plugins/views',
  );
}

/**
 * List all entities for the given type.
 */
function oa_buttons_entities_list_page($type) {
  return views_embed_view('oa_buttons_entities', 'default', $type);
}

/**
 * Entity API callback to view a command button.
 *
 * @see entity_view()
 */
function oa_buttons_view($entity, $view_mode = 'full', $langcode = LANGUAGE_NONE) {
  return entity_get_controller('oa_button')->view($entity, $view_mode, $langcode);
}

/**
 * This is just a passthrough for entityname_view().
 */
function oa_button_view($entity, $view_mode = 'full', $langcode) {
  return oa_buttons_view($entity, $view_mode, $langcode);
}

/**
 * Save a button.
 *
 * @see node_save()
 */
function oa_buttons_save($entity) {
  return entity_get_controller('oa_button')->save($entity);
}

/**
 * Delete a button.
 *
 * @param $bid
 *   A command button ID.
 */
function oa_buttons_delete($bid) {
  oa_buttons_delete_multiple(array($bid));
}
/**
 * Delete multiple buttons.
 *
 * @param $bids
 *   An array of button IDs.
 */
function oa_buttons_delete_multiple($bids) {
  return entity_get_controller('oa_button')->delete($bids);
}

/**
 * Callback to create a new entity.
 */
function oa_buttons_create($values = array()) {
  return entity_get_controller('oa_button')->create($values);
}

/**
 * Determine if a user has access to a button.
 */
function oa_buttons_access($op, $entity = NULL, $account = NULL) {
  return entity_get_controller('oa_button')->access($op, $entity, $account);
}

/**
 * Provide a safe title for an entity button type based upon the URL.
 */
function oa_buttons_entities_title($type) {
  $type = str_replace('-', '_', $type);
  $entity_info = entity_get_info('oa_buttons');

  if (isset($entity_info['bundles'][$type])) {
    return $entity_info['bundles'][$type]['label'];
  }
}

/**
 * Get the safe human readable name of an entity bundle.
 */
function oa_buttons_get_bundle_label($bundle) {
  $entity_info = entity_get_info('oa_buttons');
  if (empty($entity_info['bundles'][$bundle]['label'])) {
    $output = t('Unknown bundle type');
  }

  return $entity_info['bundles'][$bundle]['label'];
}

/**
 * Get an array of entity bundle names, suitable for an options form.
 */
function oa_buttons_get_bundle_labels() {
  $bundles = array();
  $entity_info = entity_get_info('oa_button');

  foreach ($entity_info['bundles'] as $bundle => $info) {
    $bundles[$bundle] = $info['label'];
  }

  asort($bundles);
  return $bundles;
}

/**
 * Provide a safe title for an entity from the entity.
 */
function oa_buttons_entity_title($entity) {
  if (!empty($entity->title)) {
    return $entity->title;
  }

  return t('No title');
}

/**
 * Basic edit form for the button entity.
 *
 * The entity being edited should be stored in $form_state['entity']
 * when this form is built.
 */
function oa_buttons_entity_edit_form($form, &$form_state) {
  $entity = $form_state['entity'];

  // Map these properties for entity translations.
  $form['#entity_type'] = array(
    '#type' => 'value',
    '#value' => $entity->bundle,
  );

  $form_state['oa_button'] = $form_state['entity'];

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $entity->title,
    '#weight' => -10,
  );
  $form['name'] = array(
    '#type' => 'machine_name',
    '#default_value' => $entity->name,
    '#maxlength' => 21,
    '#machine_name' => array(
      'source' => array('title'),
      'exists' => 'oa_buttons_machine_name_exists',
    ),
  );

  $form['language'] = array(
    '#type' => 'value',
    '#value' => $entity->language,
  );

  $language = NULL;
  if (function_exists('entity_language')) {
    // entity_language() was added in Drupal 7.15.
    $language = entity_language('oa_button', $entity);
  }

  field_attach_form('oa_button', $entity, $form, $form_state, $language);

  if (!empty($form_state['add submit'])) {
    $form['actions'] = array(
      '#type' => 'actions',
    );

    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
    );
  }

  return $form;
}

/**
 * Submit callback for the button entity.
 */
function oa_buttons_entity_edit_form_submit($form, &$form_state) {
  $entity = $form_state['entity'];

  // Copy hardcoded fields.
  $entity->title = $form_state['values']['title'];
  $entity->name = $form_state['values']['name'];


  field_attach_submit('oa_button', $entity, $form, $form_state);

  oa_buttons_save($entity);

  $form_state['redirect'] = 'admin/structure/command-buttons/view/' . $entity->bid;
  if (!empty($form_state['add submit'])) {
    drupal_set_message(t('The entity has been saved.'));
  }
}

/**
 * Implements hook_entity_view().
 */
function oa_buttons_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'fieldable_panels_pane' && $entity->bundle == 'command_buttons') {
    $classes = oa_buttons_get_button_class($entity, $type, $view_mode, $langcode);
    $items = array();


    // Get all oa_button entity references attached to this pane.
    $commands = field_get_items($type, $entity, 'field_commands', $langcode);
    foreach ($commands as $command) {
      // Get the individual commands attached to the button entity.
      $links = field_get_items('oa_button', $command['entity'], 'field_command_link', $command['entity']->language);


      // Add the correct css class to each link, do token replacement, and render the link.
      foreach ($links as $link) {
        $link['attributes']['class'] = $classes['item_class'];
        $link['attributes']['class'] .= ' oa-' . str_replace('-', '_', $command['entity']->name);
        $options = array('attributes' => $link['attributes']);
        $path = filter_xss(token_replace($link['url']));
        if (drupal_valid_path($path)) {
          $title = token_replace($link['title']);
          $icon = field_get_items('oa_button', $command['entity'], 'field_link_icon', $command['entity']->language);

          if (!empty($icon[0]['value'])) {
            $title = '<i class="' . $icon[0]['value'] . '"></i> ' . $title;
            $options['html'] = TRUE;
          }

          $items[] = '<li>' . l($title, $path, $options) .'</li>';
        }
      }
    }

    // Override default field_commands handling with our new item list.
    if (!empty($items)) {
      // Unfortunate we can't use theme_item_list here because it adds a wrapper div, which causes
      // issues with bootstrap.
      $output = implode('', $items);
      $ul_class = 'oa-command-buttons';
      $use_dropdowns = field_get_items($type, $entity, 'field_use_dropdowns', $langcode);
      $dropdown_label = field_get_items($type, $entity, 'field_dropdown_label', $langcode);
      if (!empty($use_dropdowns[0]['value']) && !empty($dropdown_label[0]['value'])) {
        $ul_class .= ' dropdown-menu';
        $output = '<div class="btn-group">
          <button class="dropdown-toggle '. $classes['wrapper_class'] . '" data-toggle="dropdown" href="#">' . check_plain($dropdown_label[0]['value']) . ' <span class="caret"></span></button>
          <ul class="' . $ul_class .'">' . $output . '<ul></div>';
      }
      else {
        $output = '<ul class="' . $ul_class .'">' . $output . '<ul>';
      }

      $entity->content['field_commands'] = array(
        '#markup' => $output,
      );

    }
    else {
      // If no items were present, they either don't exist or the use doesn't have
      // access to them. Just unset the field.
      unset($entity->content['field_commands']);
    }
  }
}

/**
 * Parse the class list out the field settings on a fieldable panels pane.
 *
 * @return array
 *  an array of classes, keyed for both items and wrappers.
 */
function oa_buttons_get_button_class($entity, $type, $view_mode, $langcode) {
  $return_classes = array(
    'item_class' => 'oa-button',
    'wrapper_class' => 'oa-buttons'
  );

  $style = field_get_items($type, $entity, 'field_button_style', $langcode);

  if (!empty($style[0]['value']) && $style[0]['value'] != 'other') {
    $classes[] = $style[0]['value'];
  }
  else {
    // Grab a class if it's been set on the fieldable panels pane.
    $class = field_get_items($type, $entity, 'field_css_class', $langcode);
    if (!empty($class[0]['safe_value'])) {
      $classes[] = $class[0]['safe_value'];
    }
  }

  $size = field_get_items($type, $entity, 'field_button_size', $langcode);

  if (!empty($size[0]['value']) && $style[0]['value'] != 'default') {
    $classes[] = $size[0]['value'];
  }

  $block = field_get_items($type, $entity, 'field_block_buttons', $langcode);

  if (!empty($block[0]['value'])) {
    $classes[] = 'btn-block';
  }

  $use_dropdowns = field_get_items($type, $entity, 'field_use_dropdowns', $langcode);
  if (!empty($use_dropdowns[0]['value'])) {
    $return_classes['wrapper_class'] .= ' ' . implode(' ', $classes);
  }
  else {
    $return_classes['item_class'] .= ' ' . implode(' ', $classes);
  }

  return $return_classes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oa_buttons_form_oa_buttons_entity_edit_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['field_command_link'])) {
    $entity_info = entity_get_info('oa_button');

     // Add token module replacements fields.
    $form['tokens'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 20,
      '#title' => t('Placeholder tokens'),
      '#description' => t("The following placeholder tokens can be used in both paths and titles. When used in a path or title, they will be replaced with the appropriate values."),
    );

    $form['tokens']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array($entity_info['token type']),
      '#global_types' => TRUE,
      '#click_insert' => TRUE,
    );

    foreach ($form['field_link_icon'][LANGUAGE_NONE]['#options'] as $key => $option) {
      if ($key != '_none') {
        $form['field_link_icon'][LANGUAGE_NONE]['#options'][$key] = "<i class='" . $option . "'></i> " . $option;
      }
    }
  }
}

/**
 * Callback to determine if an entities machine name already exists.
 */
function oa_buttons_machine_name_exists($value) {
  $name_exists = db_select('oa_buttons', 'b')
                ->fields('b', array('name'))
                ->condition('b.name', $value)
                ->execute()
                ->fetchField();

  return !empty($name_exists);
}
